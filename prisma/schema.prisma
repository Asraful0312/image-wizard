// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // NeonDB connection string
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(uuid())
  clerkId         String           @unique // Clerk user ID
  email           String?          // Add email field (optional, as it may not always be available)
  credits         Int              @default(5) // Default 5 credits for new users
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  conversions     Conversion[]
  purchases       Purchase[]
  couponRedemptions CouponRedemption[] // Relation to track coupon redemptions
}

model Coupon {
  id              String           @id @default(uuid())
  code            String           @unique // The coupon code (e.g., "WELCOME10")
  credits         Int              // Number of credits awarded upon redemption
  expiresAt       DateTime?        // Optional expiration date for the coupon
  createdAt       DateTime         @default(now())
  redemptions     CouponRedemption[] // Relation to track redemptions
}

model CouponRedemption {
  id              String           @id @default(uuid())
  userId          String
  couponId        String
  redeemedAt      DateTime         @default(now())
  user            User             @relation(fields: [userId], references: [id])
  coupon          Coupon           @relation(fields: [couponId], references: [id])
  @@unique([userId, couponId]) // Ensure a user can redeem a coupon only once
}

model Conversion {
  id        String   @id @default(uuid())
  userId    String?  // Null for unauthenticated users
  type      String   // "image-to-text", "image-to-code", etc.
  inputUrl  String   // URL of uploaded image (stored in a cloud service like Vercel Blob)
  output    String   // Result (text, code, etc.)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Purchase {
  id            String   @id @default(uuid())
  userId        String
  creditsBought Int
  amountPaid    Float
  lemonSqueezyId String
  variant       String?  // Add this field to store the variant name (e.g., "Starter")
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}